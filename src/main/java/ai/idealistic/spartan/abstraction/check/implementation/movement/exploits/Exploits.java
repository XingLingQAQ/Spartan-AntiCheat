package ai.idealistic.spartan.abstraction.check.implementation.movement.exploits;

import ai.idealistic.spartan.abstraction.check.CheckEnums.HackType;
import ai.idealistic.spartan.abstraction.check.CheckRunner;
import ai.idealistic.spartan.abstraction.event.SuperPositionPacketEvent;
import ai.idealistic.spartan.abstraction.protocol.PlayerProtocol;
import ai.idealistic.spartan.functionality.server.PluginBase;
import ai.idealistic.spartan.functionality.tracking.MovementProcessing;
import ai.idealistic.spartan.listeners.protocol.TeleportListener;
import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.event.vehicle.VehicleExitEvent;

public class Exploits extends CheckRunner {

    private final IMBaritone baritone;
    private final IMGroundSpoof groundSpoof;
    private final IMMovementSpoof movementSpoof;

    public Exploits(HackType hackType, PlayerProtocol protocol) {
        super(hackType, protocol);
        baritone = new IMBaritone(this);
        groundSpoof = new IMGroundSpoof(this);
        movementSpoof = new IMMovementSpoof(this);
    }

    @Override
    protected void handleInternal(boolean cancelled, Object object) {
        if (object == null) {
            movementSpoof.run();
        } else if (object instanceof PlayerTeleportEvent) {
            baritone.teleport();
        } else if (object instanceof SuperPositionPacketEvent) {
            SuperPositionPacketEvent e = (SuperPositionPacketEvent) object;
            groundSpoof.run(
                    new PlayerMoveEvent(
                            e.protocol.bukkit(),
                            e.protocol.getLocation(),
                            e.protocol.getFromLocation()
                    )
            );
        } else if (object instanceof PlayerMoveEvent) {
            movementSpoof.update();
            baritone.run();
            groundSpoof.run((PlayerMoveEvent) object);
        } else if (object instanceof BlockBreakEvent) {
            if (((BlockBreakEvent) object).isCancelled()) {
                groundSpoof.onBreak();
            } else {
                movementSpoof.onBreak();
            }
        } else if (object instanceof VehicleExitEvent) {
            groundSpoof.onVehicleExit();
        } else if (PluginBase.packetsEnabled()
                && object instanceof PacketEvent) {
            PacketType eventType = ((PacketEvent) object).getPacketType();

            for (PacketType type : TeleportListener.packetTypes) {
                if (type.equals(eventType)) {
                    baritone.teleport();
                    break;
                }
            }
        }
    }

    @Override
    protected boolean canRun() {
        return MovementProcessing.canCheck(
                this.protocol,
                true,
                true,
                false,
                true,
                false
        );
    }

}